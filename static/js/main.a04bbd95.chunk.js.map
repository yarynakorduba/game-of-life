{"version":3,"sources":["components/Field/index.js","components/App.js","serviceWorker.js","index.js"],"names":["enhancer","compose","withStateHandlers","setCellStates","_ref","cellStates","lifecycle","componentDidUpdate","path","this","_this$props","props","fieldViewSize","cellsDimension","length","select","attr","selectAll","exit","remove","data","flatten","enter","append","d","i","Math","floor","toString","_jsx","generateFieldCellStates","size","Array","fill","map","round","random","generateRow","returnCellState","j","pathOr","getNewCellState","neighborsValue","calculateCellNeighborsValue","rerenderField","row","cell","_","App","dimension","_useState","useState","_useState2","_slicedToArray","fieldCellStates","setFieldCellStates","useEffect","rerenderFieldInterval","setInterval","clearInterval","_jsxs","className","children","Field","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uQAmDeA,EA3CEC,YACfC,aAAkB,kBAAM,kBAAM,IAAI,IAAE,CAClCC,cAAe,SAAAC,GAAA,IAAGC,EAAUD,EAAVC,WAAU,OAAO,kBAAMA,CAAU,KAErDC,YAAU,CACRC,mBAAkB,WAChB,GACEC,YAAK,CAAC,QAAS,cAAeC,QAC9BD,YAAK,CAAC,QAAS,cAAeC,MAC9B,CACA,IAAAC,EAAqDD,KAAKE,MAAlDR,EAAaO,EAAbP,cAAeE,EAAUK,EAAVL,WAAYO,EAAaF,EAAbE,cAC7BC,EAAiBR,EAAWS,OAClCX,EAAcE,GACFU,YAAO,OAChBC,KAAK,QAAS,SACdA,KAAK,QAASJ,GACdI,KAAK,SAAUJ,GACfK,UAAU,QACVC,OACAC,SACAC,KAAKC,YAAQhB,IAGbiB,QACAC,OAAO,QACPP,KACC,KACA,SAACQ,EAAGC,GAAC,OAAOA,EAAIZ,EAAkBD,EAAiBC,CAAc,IAElEG,KAAK,KAAK,SAACQ,EAAGC,GAAC,OAEXC,KAAKC,MAAMF,EAAIZ,GAAkBD,EAClCC,GACAe,UAAU,IAEbZ,KAAK,QAASJ,EAAgBC,EAAiB,GAC/CG,KAAK,SAAUJ,EAAgBC,EAAiB,GAChDG,KAAK,SAAS,SAAAQ,GAAC,OAAKA,EAAI,oBAAsB,kBAAkB,GACrE,CACF,IAIWxB,EA7CD,WAAH,OAAS6B,cAAA,SAAQ,IC0BtBC,G,MAA0B,SAAAC,GAAI,OAClC,IAAIC,MAAMD,GAAME,KAAK,GAAGC,KAAI,kBAJV,SAAAH,GAAI,OACtB,IAAIC,MAAMD,GAAME,KAAK,GAAGC,KAAI,kBAAMR,KAAKS,MAAMT,KAAKU,SAAS,GAAE,CAG3BC,CAAYN,EAAK,GAAE,GAEjDO,EAAkB,SAACb,EAAGc,EAAGnB,GAAI,OAAKoB,YAAO,EAAG,CAACf,EAAGc,GAAInB,EAAM,EAY1DqB,EAAkB,SAAChB,EAAGc,EAAGnB,GAC7B,IAAMsB,EAX4B,SAACjB,EAAGc,EAAGnB,GAAI,OAC7CkB,EAAgBb,EAAI,EAAGc,EAAI,EAAGnB,GAC9BkB,EAAgBb,EAAI,EAAGc,EAAGnB,GAC1BkB,EAAgBb,EAAI,EAAGc,EAAI,EAAGnB,GAC9BkB,EAAgBb,EAAGc,EAAI,EAAGnB,GAC1BkB,EAAgBb,EAAGc,EAAI,EAAGnB,GAC1BkB,EAAgBb,EAAI,EAAGc,EAAI,EAAGnB,GAC9BkB,EAAgBb,EAAI,EAAGc,EAAGnB,GAC1BkB,EAAgBb,EAAI,EAAGc,EAAI,EAAGnB,EAAM,CAGbuB,CAA4BlB,EAAGc,EAAGnB,GACzD,OAAKA,EAAKK,GAAGc,IAAyB,IAAnBG,GAA4C,IAAnBA,EACnC,EACEA,GAAkB,GAAKA,EAAiB,EAC1C,OADF,CAGT,EAEME,EAAgB,SAAAxB,GAEpB,OADmBA,EAAKc,KAAI,SAAAW,GAAG,OAAIA,EAAIX,KAAI,SAAAY,GAAI,OAAIA,CAAI,GAAC,IACtCZ,KAAI,SAACW,EAAKpB,GAAC,OAC3BoB,EAAIX,KAAI,SAACa,EAAGR,GAAC,OAAKE,EAAgBhB,EAAGc,EAAGnB,EAAK,GAAC,GAElD,EAEe4B,EAvDH,SAAH5C,GAAuB,IAAjB6C,EAAS7C,EAAT6C,UACPrC,EAHU,GAGMqC,EAEtBC,EAA8CC,mBAC5CrB,EAAwBmB,IACzBG,EAAAC,YAAAH,EAAA,GAFMI,EAAeF,EAAA,GAAEG,EAAkBH,EAAA,GAU1C,OAPAI,qBAAU,WACR,IAAMC,EAAwBC,aAC5B,kBAAMH,EAAmBX,EAAcU,GAAiB,GACxD,KAEF,OAAO,kBAAMK,cAAcF,EAAuB,CACpD,IAEEG,eAAA,OAAKC,UAAU,MAAKC,SAAA,CAClBjC,cAAA,MAAIgC,UAAU,SAAQC,SAAC,iBACvBjC,cAACkC,EAAK,CAAC1D,WAAYiD,EAAiB1C,cAAeA,MAGvD,ECfkBoD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACPzC,cAACmB,EAAG,CAACC,UAAW,KAChBsB,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,YACf,G","file":"static/js/main.a04bbd95.chunk.js","sourcesContent":["import React from \"react\";\nimport { select } from \"d3\";\nimport { compose, flatten, path } from \"ramda\";\nimport { lifecycle, withStateHandlers } from \"recompose\";\nimport \"./Field.scss\";\n\nconst Field = () => <svg />;\n\nconst enhancer = compose(\n  withStateHandlers(() => () => null, {\n    setCellStates: ({ cellStates }) => () => cellStates\n  }),\n  lifecycle({\n    componentDidUpdate() {\n      if (\n        path([\"state\", \"cellStates\"], this) !==\n        path([\"props\", \"cellStates\"], this)\n      ) {\n        const { setCellStates, cellStates, fieldViewSize } = this.props;\n        const cellsDimension = cellStates.length;\n        setCellStates(cellStates);\n        const svg = select(\"svg\")\n          .attr(\"class\", \"Field\")\n          .attr(\"width\", fieldViewSize)\n          .attr(\"height\", fieldViewSize)\n          .selectAll(\"rect\")\n          .exit()\n          .remove()\n          .data(flatten(cellStates));\n\n        svg\n          .enter()\n          .append(\"rect\")\n          .attr(\n            \"x\",\n            (d, i) => ((i % cellsDimension) * fieldViewSize) / cellsDimension\n          )\n          .attr(\"y\", (d, i) =>\n            (\n              (Math.floor(i / cellsDimension) * fieldViewSize) /\n              cellsDimension\n            ).toString()\n          )\n          .attr(\"width\", fieldViewSize / cellsDimension - 2)\n          .attr(\"height\", fieldViewSize / cellsDimension - 2)\n          .attr(\"class\", d => (d ? \"Field__rect_alive\" : \"Field__rect_dead\"));\n      }\n    }\n  })\n);\n\nexport default enhancer(Field);\n","import React, { useEffect, useState } from \"react\";\nimport { pathOr } from \"ramda\";\nimport Field from \"./Field\";\n\nimport './App.scss';\n\nconst CELL_SIZE = 18;\n\nconst App = ({ dimension }) => {\n  const fieldViewSize = dimension * CELL_SIZE;\n\n  const [fieldCellStates, setFieldCellStates] = useState(\n    generateFieldCellStates(dimension)\n  );\n  useEffect(() => {\n    const rerenderFieldInterval = setInterval(\n      () => setFieldCellStates(rerenderField(fieldCellStates)),\n      200\n    );\n    return () => clearInterval(rerenderFieldInterval);\n  });\n  return (\n    <div className=\"App\">\n      <h1 className=\"Header\">Game of Life</h1>\n      <Field cellStates={fieldCellStates} fieldViewSize={fieldViewSize} />\n    </div>\n    )\n  };\n\nconst generateRow = size =>\n  new Array(size).fill(0).map(() => Math.round(Math.random()));\n\nconst generateFieldCellStates = size =>\n  new Array(size).fill(0).map(() => generateRow(size));\n\nconst returnCellState = (i, j, data) => pathOr(0, [i, j], data);\n\nconst calculateCellNeighborsValue = (i, j, data) =>\n  returnCellState(i - 1, j - 1, data) +\n  returnCellState(i - 1, j, data) +\n  returnCellState(i - 1, j + 1, data) +\n  returnCellState(i, j - 1, data) +\n  returnCellState(i, j + 1, data) +\n  returnCellState(i + 1, j - 1, data) +\n  returnCellState(i + 1, j, data) +\n  returnCellState(i + 1, j + 1, data);\n\nconst getNewCellState = (i, j, data) => {\n  const neighborsValue = calculateCellNeighborsValue(i, j, data);\n  if ((data[i][j] && neighborsValue === 2) || neighborsValue === 3) {\n    return 1;\n  } else if (neighborsValue <= 2 || neighborsValue > 3) {\n    return 0;\n  }\n};\n\nconst rerenderField = data => {\n  const copiedData = data.map(row => row.map(cell => cell));\n  return copiedData.map((row, i) =>\n    row.map((_, j) => getNewCellState(i, j, data))\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <App dimension={35} />,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}